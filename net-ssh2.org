#+Title: Net::SSH2

#+Author: Salvador Fandiño
#+Email: sfandino@yahoo.com

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: :nil
#+OPTIONS: ^:{}

#+REVEAL_THEME: black
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/


* Net::SSH2 101

#+begin_src cperl
  my $ssh = Net::SSH2->new();
  $ssh->connect($host) or die;;
  $ssh->check_hostkey('strict') or die;   # ¡nuevo en 0.59!
  $ssh->auth(username => $user, interactive => 1) or die;

  my $ch = $ssh->channel;
  $ch->exec("echo 'hola mundo!'");
  $ch->send_eof;
  print while <$ch>;
  print "exit status: " . $ch->exit_status . "\n";
  $ch->close;

  $ssh->scp_put("/tmp/foo", "/tmp/bar");

  $ssh->disconnect;
#+end_src

** Net::SSH2 201

   Nada es lo que parece...


* Un poco de historia

** 1999: [[ftp://ftp.cpan.org/pub/CPAN/authors/id/S/SA/SALVA/sperl-1.00][sperl]] (S. Fandiño)

   - Un script que es capaz de ejecutar programas en Perl en máquinas
     remotas utilizando [[https://en.wikipedia.org/wiki/Secure_Shell][SSH]].

   - Mi primera contribución a CPAN

   - ¡Cuando en CPAN todavía se subían scripts!

** 2000: [[https://metacpan.org/pod/Net::SSH][Net::SSH]] (Ivan Kohler)

   - Wrapper para el cliente binario de SSH.

   - Simple y limitado.

** 2001: [[https://metacpan.org/pod/Net::SSH::Perl][Net::SSH::Perl]] + [[https://metacpan.org/pod/Net::SFTP][Net::SFTP]] (Benjamin Trott)

   - Proyecto muy ambicioso que implementa toda la pila de
     SSH en Perl desde cero.

   - Puede usar algunos módulos XS para mejorar el rendimiento.

** 2005: [[https://metacpan.org/pod/Net::SFTP::Foreign][Net::SFTP::Foreign]] (S. Fandiño)

   - Fork de Net::SFTP que elimina la dependencia de Net::SSH::Perl
     substituyéndolo por el cliente nativo ~ssh~.

   - Instalar Net::SSH::Perl y sus dependencias es un infierno ([[https://metacpan.org/pod/Math::PARI][Math::PARI]]).

** 2005: [[https://metacpan.org/pod/Net::SSH2][Net::SSH2]] (David B. Robins)

   - ¡Trata de substituir a Net::SSH::Perl que nadie es capaz de mantener!

   - Basado en la biblioteca [[https://libssh2.org/][LibSSH2]].

   - Muy difícil de usar.

   - Tanto libssh2 como Net::SSH2 tienen muchos bugs.

   - La documentación es pésima (y esto no va a mejorar en mucho
     tiempo).

** 2008: [[https://metacpan.org/pod/Net::OpenSSH][Net::OpenSSH]] (S. Fandiño)

   - Wrapper del cliente binario de [[http://www.openssh.com/][OpenSSH]].

   - Usa la multiplexación de canales.

   - Amigable y potente.

   - No funciona en Windows :-(

** 2009: [[https://metacpan.org/pod/Net::SFTP::Foreign::Backend::Net_SSH2][Net::SFTP::Foreign::Backend::Net_SSH2]] (S. Fandiño)

   - Net::SFTP::Foreign utilizando Net::SSH2 como transporte.

** 2011: [[https://metacpan.org/pod/Net::SSH::Any][Net::SSH::Any]] (S. Fandiño)

   - Un subconjunto del API de Net::OpenSSH trabajando sobre casi
     cualquier cosa que implemente el protocolo SSH:

     - Binarios plink ([[http://www.chiark.greenend.org.uk/~sgtatham/putty/][Putty]]), ssh3g ([[http://www.ssh.com/products/tectia-ssh][Tectia]]), sexec ([[https://www.bitvise.com/index][Bitvise]]), ssh ([[http://www.openssh.com/][OpenSSH]] y forks), [[https://matt.ucc.asn.au/dropbear/dropbear.html][Dropbear]].

     - Net::OpenSSH

     - Net::SSH2

     - Net::SSH::Perl (¡en el futuro!)


** 2011: Net::SSH::Any::Backend::Net_SSH2

   - 2012: primera versión usable

   - Pero tiene muchos bugs...

   - ¡Eso me obliga a mirar dentro de Net::SSH2 y luego en libssh2!


** 2016: Net::SSH::Perl (Steffen Schwigon)

   - Última hora: ¡2.01 recién publicado!

   - Con soporte para algoritmos de cifrado y firma modernos.

   - ¿Para cúando Net::SSH::Any::Backend::Net_SSH_Perl?


* Salva & Net::SSH2

** Contribuciones a Net::SSH2

   - Mayo de 2011: mi primera contribución: una mejora del
     ~Makefile.PL~.

   - Sigo enviando pull-requests y...

   - Octubre 2013: me dan permisos de co-mantenedor, pero me piden que
     no publique nuevas versiones sin que alguien las revise.

   - Agosto 2015: asumo que soy el único que realmente trabaja en el
     módulo y empiezo a publicar nuevas versiones (0.54_01)

   - A día de hoy llevo 3 versiones estables y 18 de desarrollo.

** Contribuciones a libssh2

   - ... porque muchos de los problemas de Net::SSH2 vienen de libssh2

   - Octubre de 2013: mi primera contribución, parche para arreglar el
     control de flujo de SSH.

   - Un par de parches gordos más y multitud de pequeños arreglos.

** Algunas estadísticas de Net::SSH2

   - Soy el tercer mantenedor (antes que yo David B. Robins y Rafael
     Kitover).

   - Durante algunos años estuvo abandonado.

   - En GitHub aparecen 16 personas que han contribuido, de las cuales...

     - 9 lo han hecho con 1 parche.

     - 2 con dos parches.

     - Solo R. Kitover y yo tenemos más de 4 commits (no hay registros
       de la época de David R. Robins - la pregitstoría).

** Problemas que me encuentro

   - Interfaces incorrectos por falta de conocimiento del
     protocolo SSH2 o de libssh2.

   - Falta de consistencia: valores que se devuelven, gestión de
     errores, timeouts, etc.

   - API de bajo nivel (traslación directa de libssh2)...

   - ... y de alto nivel de manera oportunista

   - Muchos bugs (~40 tickets abiertos entre [[https://rt.cpan.org/Dist/Display.html?Status=Active&Queue=Net-SSH2][RT]] y [[https://github.com/rkitover/net-ssh2/issues][GitHub]]).

   - Falta funcionalidad básica.

** Más problemas

   - Work-arounds para los bugs carencias funcionales de libssh2.

   - Se han aplicado parches cortos de miras: se soluciona o
     simplifica un problema muy especifico a costa de romper la
     generalidad del módulo.

   - Los usuarios utilizan multitud de work-arounds para evitar
     problemas en el módulo:

     - Que en realidad tampoco funcionan bien.

     - Programación cargo-cult.


* Mis ideales

O como tomar decisiones...

** Cualidades de un buen módulo

  1. Confiable y robusto.

  2. Propósito general o amplio.

  3. Fácil de usar (documentable).

  4. Eficiente.

** ... y en un módulo adoptado

  1. Confiable y robusto.

  2. *Compatible hacia atrás*.

  3. Propósito general o amplio.

  4. Fácil de usar (documentable).

  5. Eficiente.


* Algunos ejemplos

** Net::SSH2::Channel::read

#+begin_src cperl

  $ch->read($buffer, $size, $ext);

#+end_src

Un usuario se queja de que cuando llama a ~read~, se leen menos bytes
de los que solicita.

Se aplica un parche que hace que ~read~ llame a ~libssh2_channel_read~
repetidamente hasta llenar el buffer.

** Net::SSH2::Channel::read

   ¡MAL!

   En pocas ocasiones sabemos de antemano cuantos bytes queremos leer.

** Net::SSH2::Channel::READLINE

#+begin_src cperl

  my $chan=$ssh2->channel();
  $chan->shell();
  print $chan "ifconfig\n";
  print "LINE : $_" while <$chan>;
  print $chan "top\n";
  print "LINE : $_" while <$chan>;
  $chan->close;

#+end_src

¡Un usuario dice que esto le funciona!

** Net::SSH2::Channel::READLINE

~READLINE~ tiene un timeout interno y no documentado de 250ms.

De nuevo, una solución incorrecta y poco confiable que rompe la
generalidad del módulo.

** Manejo de errores

   - libssh2 mantiene un código de error (similar a ~$!~).

   - Net::SSH2 mantiene su propio código de error.

   - Cuando el usuario solicita el código de error se combinan ambos
     valores.

   - Pero es imposible combinar ambos valores correctamente en todos los
     casos.

** Manejo de errores

La solución pasa por extender el API de libssh2 para permitir
cambiar el código de error desde el exterior:

#+begin_src c

int
libssh2_session_set_last_error(LIBSSH2_SESSION *session,
                               int errcode, const char *errmsg) 

#+end_src

¡Hay que solucionar los problemas de raíz!

** EAGAIN

   - libssh2 maneja el error ~LIBSSH2_ERROR_EAGAIN~ de manera especial:
     sus funciones devuelven este error pero no lo guardan internamente.

   - Los wrappers de XS devuelven ~undef~ en caso de error. Los
     ~LIBSSH2_ERROR_EAGAIN~ se pierden.

   - Obviamente esto no esta documentado en ningún sitio.

** Perlish EAGAIN

   Hacemos que EAGAIN si se guarde.

   Ahora tenemos ~libssh2_session_set_last_error~.

** Mucho código XS ad-hoc

   - La conversión de valores entre Perl y C se hace explícitamente en
     los wrappers de XS.

   - Cada wrapper tiene ligeras variaciones.

   - Cuando aparece un bug relacionado con la conversión de valores,
     se corrige en el método donde se ha detectado pero no en otros
     similares.

** Menos código XS ad-hoc

   - Clasificar los tipos a convertir.

   - Utilizar typemaps de manera sistemática.

** Otros problemas que se solucionan con typemaps

   - Forzar la codificación de los datos (latin1).

   - Gestionar correctamente enteros de 64bits en perls de 32bits.

#+begin_src c

T_SSH2_BYTES64
    $arg = ( (($var) < 0)
             ? &PL_sv_undef
             : ((IVSIZE >= 8) ? newSVuv($var) : newSVnv($var)) );

#+end_src

** Faltas de funcionalidad

¿Cual es el problema aquí?

#+begin_src cperl

  my $ssh = Net::SSH2->new();
  $ssh->connect($host) or die;;
  $ssh->check_hostkey('strict') or die;   # ¡nuevo en 0.59!
  $ssh->auth(username => $user, interactive => 1) or die;

#+end_src

** Chequeo de la clave del servidor

   - Es un paso critico dentro del protocolo SSH.

   - Evita ataques man-in-the-middle.

   - Absolutamente nadie lo realiza con Net::SSH2

** Problemas de interfaz

#+begin_src cperl

  $ssh->auth(username => $user, password => $pwd);

  $ssh->auth(username => $user, publickey => $pubkey,
             privateley => $privkey, password => $passphrase);

#+end_src

** Problemas de interfaz

   - La interfaz es ambigua:

     - El mismo identificador es utilizado para clave y passphrase.

   - Solución:

     - Añadir el identificador ~passphrase~.

     - Usar heurísticas para inferir cuando el usuario dice ~password~
       para significar ~passphrase~ y generar un aviso.

     - En un par de ciclos (1 año) eliminar las heurísticas.

** Problemas del protocolo SSH

   - Los canales de STDOUT y STDERR comparten el mensaje de EOF.

   - No es posible indicar que uno ha finalizado y el otro no.

#+begin_src cperl

  while (defined (my $line = $ch->readline(0))) { # 0: stdout
      print $line;
  }
  while (defined (my $line = $ch->readline(1))) { # 1: stderr
      print STDERR $line;
  }

#+end_src

** Leer en paralelo

¡No hay solución mágica!

#+begin_src cperl

  while (my ($o, $e) = $ch->read2) {
    # ¡no se leen lineas sino bloques!
    print $o;
    print STDERR $e;
  }

#+end_src


* Conclusiones

** Adoptar un módulo

   - Enmendar errores y hacer mejoras Vs. compatibilidad hacia atrás.

   - Visión global de a donde se quiere ir:

     - Requiere conocer la problemática a fondo.

     - Decir que no a parches cortos de miras.

   - Esto es FLOSS:

     - Mejor solucionar los problemas en la fuente.

     - Aunque sea más lento.

   - Hay problemas que no tienen solución.

   - Hace falta ¡paciencia!

** Net::SSH2

   - Todavía tiene muchos problemas y bugs (libssh2).

   - Es fácil usarlo para hacer programas que funcionen bien el 95% de
     las ocasiones.

   - Es casi imposible usarlo para hacer programas que funcionen siempre:

     - Debido a singularidades y casos extremos que libssh2 no maneja
       correctamente.

     - Puede requerir estudiar el código de Net::SSH2 y de libssh2.

   - Todo lo que necesita *Net::SSH::Any* funciona bien :-)


* ¿Preguntas?
